var g_data = {"name":"avmm_vu.vhd","src":"library ieee;\n  use ieee.std_logic_1164.all;\n  use ieee.numeric_std.all;\n  use work.avmm_pkg.all;\n\nlibrary osvvm;\ncontext osvvm.OsvvmContext;\n\nlibrary osvvm_common;\ncontext osvvm_common.OsvvmCommonContext;\n\nentity avmm_vu is\n  port (\n    trans_io: inout AddressBusRecType;\n    clk_i   : in    std_logic;\n    pins_io : inout AvmmPinoutT\n  );\nend entity;\n\narchitecture behav of avmm_vu is\n\n  -- Enter your code here\n\n  constant IDLE_PINS : AvmmPinoutT := (\n    address => (pins_io.address'range => '0'),\n    writedata => (pins_io.writedata'range => '0'),\n    readdata => (pins_io.readdata'range => 'Z'), -- VU is not supposed to drive this\n    byteenable => (pins_io.byteenable'range => '0'),\n    read => '0',\n    write => '0'\n  );\nbegin\n\n  sequencer_p: process is\n    variable read_data : std_logic_vector(pins_io.readdata'range);\n    variable wait_cycles_v : integer;\n  begin\n    -- apply default values to the pins\n    -- Enter your code here\n\n    pins_io <= IDLE_PINS;\n\n    wait for 0 ns;\n    dispatcher_loop: loop\n      WaitForTransaction(clk => clk_i, Rdy => trans_io.Rdy, Ack => trans_io.Ack);\n      case trans_io.Operation is\n        when WRITE_OP =>\n          pins_io.address <= std_logic_vector(trans_io.Address);\n          pins_io.writedata <= std_logic_vector(trans_io.DataToModel);\n          pins_io.write <= '1';\n          pins_io.byteenable <= std_logic_vector(to_unsigned(trans_io.IntToModel, pins_io.byteenable'length));\n          WaitForClock(clk_i, 1);\n          pins_io <= IDLE_PINS;\n          wait for 0 ns;\n        when READ_OP =>\n          pins_io.address <= std_logic_vector(trans_io.Address);\n          pins_io.read <= '1';\n          pins_io.byteenable <= std_logic_vector(to_unsigned(trans_io.IntToModel, pins_io.byteenable'length));\n          WaitForClock(clk_i, 2);\n          wait for 0 ns;\n          trans_io.DataFromModel <= ToTransaction(pins_io.readdata);\n          pins_io <= IDLE_PINS;\n          wait for 0 ns;\n        when others =>\n          Alert(\"Unimplemented Transaction\", FAILURE);\n          \n      end case;\n    end loop;\n  end process;\n\nend architecture;\n","lang":"vhdl"};
processSrcData(g_data);